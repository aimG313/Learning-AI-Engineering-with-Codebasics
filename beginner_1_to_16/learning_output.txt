1)variable = container = to store some specific data
these are call variables because the value can vary

naming convention: can't use something which is already included in python as a keyword

2)Number operation:
% = modular operator = gives remainder 
** = power operator

3)Print operator: print()

to round off to certain digit: print(round(,))

4)String: sequence of character
to access use => string[]
in python string members can't be varry
to traverse use => string[:]
to use multiline use => ''' '''
to concatinate => string1 + string2

4)type casting: type conversion in python
eg:string(Number), int(a)

5)list: similar to array in C++ 

all values have similar meaning
to access a item from list use=> list[index]
to traverse like string use=> list[:]
to add element at last => list.append("item")
to insert element in specific location=> 
list.insert(1,"item")
to concatinate = list1 + list2
to get the length of list = print(len(list))
to test some item whether present or not => "item" in list

6)Input: use input("")
in python input operation always takes input a string
use typecasting for data type change

7)loop:

for i in list:
  operation

range of loop=> range(start,end)
to stop the loop before completing use => break
to skip a operation use=> continue

while comdition:

8)Function: A block of codes for specific tasks

input => Function arguments (1. Named, 2.Positional, 3.Default)
output => Return value

Documentation strings: multiline strings explanation of Function like a comment

9)Dictionary: allows to store key, value pairs
also known as maps, hashtables , Associate arrays

classical example: telephone directory
accessing dict element=> d["element"]
order in the Dictionary doesn't matter it's random, based on keyword
to delete use => del d["element"]
to check someone in Dictionary=>"element" in Dictionary 
to make a dictionary empty=> dictionary.clear

10)Tuples: list of value grouped together 
all values have different meaning (heterogeneous)
example: address of a person
can't change elements(Immutable)

*11)Modules: 

Reusing a code written by some others

12)Files:

to open a file use => f = open("full path(with//)","w/r/a")
w=>write with overwrite
r=>read 
a=>append without over write
to write use => f.write("what I want to write)
to read use => print(f.read())

split() will split the string usning input character and retun a list(array) of words

with statement => replacement of close()
to check close or open => print(f.closed)


13) JSON: Java Script Object Notion
JSON is a data exchange format similar to XML
light weight than XML

json library will turn the dictionary into string or json format =>
imprt json
json.dumps(dictionary)
json to dictionary => 
json.loads(file)

14)Entry point: _ _ name _ _ == _ _ main _ _
like "main" in 

*15)Exceptions: errors are errors detected at the the time of program executions

*16)class: Human
   Object: Tom cruse 
   Properties: Male
   Methods: Action